// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button in disabled/inactive state doesn't fire event on press 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#E8E8E8",
        "borderColor": "#E8E8E8",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#737373",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myDisabledButton"
  variant="disabled"
/>
`;

exports[`Button in disabled/inactive state outputs correct title/text 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#E8E8E8",
        "borderColor": "#E8E8E8",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#737373",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myDisabledButton"
  variant="disabled"
>
  <Text
    color="#161616"
    fontFamily="OpenSans-Regular"
    style={
      Array [
        Object {
          "color": "#161616",
          "fontFamily": "OpenSans-Regular",
        },
        undefined,
      ]
    }
  >
    My Button
  </Text>
</View>
`;

exports[`Button in disabled/inactive state shows correct color when disabled 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#E8E8E8",
        "borderColor": "#E8E8E8",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#737373",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myDisabledButton"
  variant="disabled"
/>
`;

exports[`Button in loading state renders successfully 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myLoadingButton"
  title="My Button"
  variant="primary"
>
  <View
    alignItems="center"
    flexDirection="row"
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
        },
        undefined,
      ]
    }
  >
    <ActivityIndicator
      accessibilityHint="loading"
      color="#161616"
      size="small"
    />
  </View>
</View>
`;

exports[`Button in loading state should be in disabled state and not triggering any action 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myLoadingButton"
  title="My Button"
  variant="primary"
>
  <View
    alignItems="center"
    flexDirection="row"
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
        },
        undefined,
      ]
    }
  >
    <ActivityIndicator
      accessibilityHint="loading"
      color="#161616"
      size="small"
    />
  </View>
</View>
`;

exports[`Button in loading state should render loading spinner 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myLoadingButton"
  title="My Button"
  variant="primary"
>
  <View
    alignItems="center"
    flexDirection="row"
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
        },
        undefined,
      ]
    }
  >
    <ActivityIndicator
      accessibilityHint="loading"
      color="#161616"
      size="small"
    />
  </View>
</View>
`;

exports[`Button use size props correctly fires the assigned event on press 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="lg"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 12,
        "paddingLeft": 24,
        "paddingRight": 24,
        "paddingTop": 12,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
/>
`;

exports[`Button use size props correctly outputs correct title/text 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="lg"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 12,
        "paddingLeft": 24,
        "paddingRight": 24,
        "paddingTop": 12,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
>
  <Text
    color="#161616"
    fontFamily="OpenSans-Regular"
    style={
      Array [
        Object {
          "color": "#161616",
          "fontFamily": "OpenSans-Regular",
        },
        undefined,
      ]
    }
  >
    My Button
  </Text>
</View>
`;

exports[`Button use size props correctly renders primary variant and large size correctly 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="lg"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 12,
        "paddingLeft": 24,
        "paddingRight": 24,
        "paddingTop": 12,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
/>
`;

exports[`Button use size props correctly renders successfully 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="lg"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 12,
        "paddingLeft": 24,
        "paddingRight": 24,
        "paddingTop": 12,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
/>
`;

exports[`Button use variant props fires the assigned event on press 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
/>
`;

exports[`Button use variant props outputs correct title/text 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
>
  <Text
    color="#161616"
    fontFamily="OpenSans-Regular"
    style={
      Array [
        Object {
          "color": "#161616",
          "fontFamily": "OpenSans-Regular",
        },
        undefined,
      ]
    }
  >
    My Button
  </Text>
</View>
`;

exports[`Button use variant props renders primary variant correctly 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
/>
`;

exports[`Button use variant props renders successfully 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myPrimaryButton"
  variant="primary"
/>
`;

exports[`Button with icon renders icon component 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="myIconButton"
  variant="primary"
>
  <View
    collapsable={false}
    style={
      Object {
        "transform": Array [
          Object {
            "scale": 1,
          },
        ],
      }
    }
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={16}
      bbWidth={16}
      color={4278190080}
      fill="black"
      focusable={false}
      height={16}
      meetOrSlice={0}
      minX={0}
      minY={0}
      size={16}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Object {
            "flex": 0,
            "height": 16,
            "width": 16,
          },
        ]
      }
      testID="my-icon"
      tintColor={4278190080}
      vbHeight={24}
      vbWidth={24}
      width={16}
    >
      <RNSVGGroup
        fill={4278190080}
        propList={
          Array [
            "fill",
          ]
        }
      >
        <RNSVGGroup>
          <RNSVGGroup>
            <RNSVGRect
              height="24"
              opacity={0}
              width="24"
              x={0}
              y={0}
            />
            <RNSVGPath
              d="M21.6 11.22L17 7.52V5a1.91 1.91 0 0 0-1.81-2H3.79A1.91 1.91 0 0 0 2 5v10a2 2 0 0 0 1.2 1.88 3 3 0 1 0 5.6.12h6.36a3 3 0 1 0 5.64 0h.2a1 1 0 0 0 1-1v-4a1 1 0 0 0-.4-.78zM20 12.48V15h-3v-4.92zM7 18a1 1 0 1 1-1-1 1 1 0 0 1 1 1zm5-3H4V5h11v10zm7 3a1 1 0 1 1-1-1 1 1 0 0 1 1 1z"
            />
          </RNSVGGroup>
        </RNSVGGroup>
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
</View>
`;

exports[`Button with icon renders successfully 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  name="car-outline"
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size={16}
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
      },
      undefined,
    ]
  }
  testID="my-icon"
  variant="primary"
/>
`;

exports[`Button with icon shouldn't render icon component if icon property is empty 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": false,
    }
  }
  accessible={true}
  alignItems="center"
  collapsable={false}
  focusable={true}
  isLoading={false}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  size="md"
  style={
    Array [
      Object {
        "alignItems": "center",
        "backgroundColor": "#FECF28",
        "borderColor": "#FECF28",
        "borderRadius": 4,
        "borderWidth": 1,
        "color": "#161616",
        "paddingBottom": 8,
        "paddingLeft": 16,
        "paddingRight": 16,
        "paddingTop": 8,
      },
      undefined,
    ]
  }
  testID="noIconButton"
  title="My Button"
  variant="primary"
/>
`;
